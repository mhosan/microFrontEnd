## INSTRUCCIONES CRÍTICAS - LEER PRIMERO
- **PENSAR MUY BIEN ANTES DE RESPONDER**
- **NO AGREGAR funcionalidades no solicitadas**
- **NO MODIFICAR código existente que funciona correctamente**
- **SOLO resolver el problema específico descrito**
- **CONFIRMAR comprensión antes de proceder**

## PROCESO DE RESOLUCIÓN

### 1. ANÁLISIS INICIAL (Sin modificar código)
Analizar el código actual relacionado con el bugfix:
Error loading mfe3 remote component: RuntimeError: NG0203: The `EnvironmentInjector` token injection failed. `inject()` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`. Find more at https://v20.angular.dev/errors/NG0203
    at injectInjectorOnly (_angular_core.L1nTeUSaRu-dev.js:612:15)
    at ɵɵinject (_angular_core.L1nTeUSaRu-dev.js:631:61)
    at Object.factory (_angular_core.L1nTeUSaRu-dev.js:12336:47)
    at _angular_core.jmicCBypHw-dev.js:1321:47
    at runInInjectorProfilerContext (_angular_core.jmicCBypHw-dev.js:419:9)
    at R3Injector.hydrate (_angular_core.jmicCBypHw-dev.js:1319:21)
    at R3Injector.get (_angular_core.jmicCBypHw-dev.js:1200:33)
    at __spreadProps.getStandaloneInjector (_angular_core.L1nTeUSaRu-dev.js:12356:39)
    at createRootViewInjector (_angular_core.jmicCBypHw-dev.js:10971:48)
    at ComponentFactory2.create (_angular_core.jmicCBypHw-dev.js:11040:38)


[DESCRIPCIÓN DEL BUGFIX AQUÍ]
Al crear mfe1 y mfe2 no hay ningun problema, pero al crear mfe3 y mfe4 aparecen los errores.

**Restricciones del análisis:**
- Examinar ÚNICAMENTE el código relacionado con el problema
- Identificar la causa raíz específica
- NO sugerir "mejoras" adicionales
- NO refactorizar código funcional

### 2. INVESTIGACIÓN OBLIGATORIA
**Documentación oficial de referencia:**
- https://github.com/manfredsteyer/nf-test
- https://www.angulararchitects.io/en/blog/combining-native-federation-and-module-federation/
- https://www.angulararchitects.io/en/blog/micro-frontends-with-modern-angular-part-1-standalone-and-esbuild/


**Validación externa:**
- Buscar casos similares en StackOverflow
- Confirmar que la solución propuesta es la práctica estándar

### 3. DIAGNÓSTICO CERTERO
Antes de proponer solución, CONFIRMAR:
- [ ] Causa raíz identificada con certeza
- [ ] Solución validada en documentación oficial
- [ ] Impacto en funcionalidades existentes evaluado
- [ ] Solución mínima viable definida

### 4. PLAN DE IMPLEMENTACIÓN
**Solo después de confirmado el diagnóstico:**

#### Fase 1: Preparación
- Archivos a modificar (mínimos necesarios)
- Funcionalidades que NO deben verse afectadas
- Tests de regresión necesarios

#### Fase 2: Implementación Mínima
- Cambios específicos requeridos
- Código exacto a modificar
- Sin refactoring innecesario

#### Fase 3: Validación
- Verificar que el bug se resolvió
- Confirmar que no se rompió funcionalidad existente

## FORMATO DE RESPUESTA REQUERIDO

### DIAGNÓSTICO
**Causa identificada:** [Una línea específica]
**Archivos afectados:** [Lista mínima]
**Funcionalidades en riesgo:** [Si las hay]

### SOLUCIÓN PROPUESTA
**Cambios mínimos necesarios:** [Descripción concisa]
**Archivos a modificar:** [Lista específica]
**Líneas de código aproximadas:** [Estimación]

### PLAN FASEADO
**Fase 1:** [Acción específica]
**Fase 2:** [Acción específica]
**Fase 3:** [Validación]

## VALIDACIONES FINALES
- [ ] ¿La solución es la mínima posible?
- [ ] ¿Se validó con documentación oficial?
- [ ] ¿Se confirmó en fuentes externas?
- [ ] ¿No agrega funcionalidades extras?
- [ ] ¿Preserva el código existente funcional?